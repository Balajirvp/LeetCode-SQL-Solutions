-- Solution 1: (438 ms,	0 B)

WITH RECURSIVE CTE AS
(
   SELECT MIN(LOG_ID) AS NUMBER_RANGE, 1 AS N 
   FROM LOGS
   UNION ALL
   SELECT NUMBER_RANGE + 1 AS NUMBER_RANGE, N+1 AS N
   FROM CTE
   WHERE NUMBER_RANGE < (SELECT MAX(LOG_ID) FROM LOGS)
)

SELECT MIN(LOG_ID) AS START_ID, MAX(LOG_ID) AS END_ID
FROM
(
    SELECT LOG_ID, B.N - ROW_NUMBER() OVER (ORDER BY LOG_ID) AS GRP
    FROM LOGS A
    INNER JOIN CTE B
    ON A.LOG_ID = B.NUMBER_RANGE
) A
GROUP BY GRP
ORDER BY 1;

-- Solution 2: (383 ms,	0 B)

WITH TEMP AS
(   SELECT DISTINCT LOG_ID, ROW_NUMBER() OVER(ORDER BY LOG_ID) AS R_N
    FROM LOGS 
    WHERE LOG_ID NOT IN 
    (
        SELECT A.LOG_ID 
        FROM LOGS A
        INNER JOIN LOGS B
        ON A.LOG_ID - 1 = B.LOG_ID
    ) 
), TEMP1 AS
(
    SELECT DISTINCT LOG_ID, ROW_NUMBER() OVER(ORDER BY LOG_ID) AS R_N
    FROM LOGS
    WHERE LOG_ID NOT IN 
    (
        SELECT A.LOG_ID 
        FROM LOGS A
        INNER JOIN LOGS B
        ON A.LOG_ID + 1 = B.LOG_ID
    ) 

)

SELECT A.LOG_ID AS START_ID, B.LOG_ID AS END_ID 
FROM TEMP A
INNER JOIN TEMP1 B
ON A.R_N = B.R_N;